---
import { generateHeadingId } from "../utils/storyblokUtils";

interface Props {
  docBlock: any;        // Storyblok's block type "doc"
  minLevel?: number;
  maxLevel?: number;
}

const { docBlock, minLevel = 2, maxLevel = 3 } = Astro.props;

const headings = docBlock.content
  .filter((c: any) => c.type === "heading" && c.attrs.level >= minLevel && c.attrs.level <= maxLevel)
  .map((c: any) => {
    return {
      slug: generateHeadingId(c),
      text: c.content.map((part: any) => part.text || "").join(""),
      level: c.attrs.level,
    };
  });

function rawHtmlLiComponent(slug: string, text: string) {
  return `<li><a href=${ "#" + slug }>${ text }</a></li>`;
}

function generateTocEntries(array: any[]) {
  let rawHtml = "";

  rawHtml += array
    .map((entry: any, index: number) => {
      const prevEntry = array[index - 1];

      if (!prevEntry || entry.level > prevEntry.level) {
        return '<ol>' + rawHtmlLiComponent(entry.slug, entry.text);
      }

      if (entry.level == prevEntry.level) {
        return rawHtmlLiComponent(entry.slug, entry.text);
      }

      if (entry.level < prevEntry.level) {
        return '</ol>' + rawHtmlLiComponent(entry.slug, entry.text);
      }
    })
    .join("");

  rawHtml += '</ol>';

  return rawHtml;
}
---

{
  headings.length > 0 && (
    <div class="toc">
      <span class="h">Table of Contents</span>
      <Fragment set:html={generateTocEntries(headings)} />
    </div>
  )
}

<style>
  .toc {
    background-color: var(--color-neutral-200);
    padding: var(--s-xl) var(--s-md);
  }
  .toc-list {
    margin-top: var(--s-xs);
    margin-bottom: 0;
  }
</style>
