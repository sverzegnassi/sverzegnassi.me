---
interface Props {
  linkBlock: any;
}

const { linkBlock } = Astro.props;

// TODO: The workaround messes up with project buttons
// TODO: button when hovered has invisible text
---

{
  () => {
    const link = linkBlock.link;

    /* HeroIcons
     *   - URL: https://heroicons.com/
     *   - Source Code: https://github.com/tailwindlabs/heroicons
     *   - License: MIT
     */
    // WORKAROUND: See note in global.css about a:not(.navbar-logo)>svg
    const heroIcon = (
      <svg
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 24 17"
        stroke-width="1.5"
        stroke="currentColor"
        aria-hidden="true"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          d="M13.5 6H5.25A2.25 2.25 0 003 8.25v10.5A2.25 2.25 0 005.25 21h10.5A2.25 2.25 0 0018 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25"
        />
      </svg>
    );

    switch (link.linktype) {
      case "url": // External URL
        return (
          <a
            class={link.styleAs}
            href={`${linkBlock.link.url}`}
            rel={link.rel || "noopener nofollow"}
            target={link.target}
            title={link.title}
            aria-label={link["aria-label"] || `${linkBlock.title} (external link: opens in a new window)`}
          >
            {linkBlock.title}
            { linkBlock.link.url.toString().startsWith("http") &&
              <Fragment set:html={heroIcon} />
            }
          </a>
        );
      case "email":
        return (
          <a href={`mailto:${link.email}`} target={link.target}>
            {linkBlock.title}
          </a>
        );
      case "story":
        return (
          <a href={`/${link.story?.full_slug}`} target={link.target}>
            {linkBlock.title}
          </a>
        );
    }
  }
}
