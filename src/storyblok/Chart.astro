---
const { blok } = Astro.props;
const chartId = "chart_" + crypto.getRandomValues(new Uint32Array(4)).join("");

const { data, caption } = blok;
---

<div>
  <table class="bar-chart" id={chartId}>
    <caption class="chart-caption">{caption}</caption>
    <thead class="chart-subgrid chart-header text-small">
      <tr class="chart-row">
        {
          data.thead?.map((th: any) => {
            return <th class="chart-label chart-head">{th.value}</th>;
          })
        }
      </tr>
    </thead>
    <tbody class="chart-subgrid text-small">
      {
        () => {
          return data.tbody?.map((tr: any) => {
            return (
              <tr class="chart-row">
                {tr.body?.map((td: any, index: number, array: any) => {
                  return index == 0 ? (
                    <th class="chart-label" scope="row">
                      {td.value}
                    </th>
                  ) : (
                    <td class="chart-line" style={`--size: ${td.value}`}>
                      {(td.value * 100).toFixed(2) + "%"}
                    </td>
                  );
                })}
              </tr>
            );
          });
        }
      }
    </tbody>
  </table>
</div>

<style>
  .bar-chart {
    display: grid;
    grid-template-columns: max-content auto;

    .chart-caption {
      grid-column: span 2;
      margin-bottom: var(--s-md);
    }

    .chart-subgrid {
      display: grid;
      grid-template-columns: subgrid;
      grid-column: span 2;
      row-gap: var(--s-sm);
    }

    .chart-label {
      font-weight: 300;
    }

    .chart-header {
      margin-bottom: var(--s-sm);
    }

    .chart-head {
      font-weight: bold;
    }

    .chart-label:first-child {
      padding-inline-end: var(--s-md);
      justify-self: end;
    }

    .chart-label:not(first-child) {
      justify-self: start;
    }

    .chart-row {
      display: grid;
      grid-template-columns: subgrid;
      grid-column: span 2;

      align-items: center;

      .chart-line {
        height: var(--s-xl);
        line-height: var(--s-xl);
        color: var(--color-neutral-800);
        background: linear-gradient(
          to right,
          var(--color-neutral-700) calc(var(--size) * 100%),
          transparent calc(var(--size) * 100%)
        );
        padding-left: calc(var(--size) * 100% + 0.5rem);
      }
    }
  }
</style>

<script src="/gsap/minified/gsap.min.js" defer></script>
<script src="/gsap/minified/ScrollTrigger.min.js" defer></script>

<script defer define:vars={{ chartId }}>
  window.addEventListener("load", () => {
    let mm = gsap.matchMedia();

    mm.add("(prefers-reduced-motion: no-preference)", () => {
      gsap.registerPlugin(ScrollTrigger);

      let slowDuration = gsap.getProperty("html", "--a-gsap-slow");
      let q = gsap.utils.selector("#" + chartId);
      q(".chart-line").forEach((el) => {
        toValue = getComputedStyle(el).getPropertyValue("--size");

        gsap.fromTo(
          el,
          { "--size": 0 },
          {
            "--size": toValue,
            duration: slowDuration,
            ease: "circ.out",
            scrollTrigger: {
              trigger: "#" + chartId,
              start: "top bottom",
            },
          }
        );
      });
    });
  });
</script>
